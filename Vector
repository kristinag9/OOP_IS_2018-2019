#include <iostream>

using namespace std;

class Vector 
{
private:
    int* elements;
    size_t numberOfElements;
    size_t capacity;
    
    void resize()
    {
        int* tempElem = new int[this->capacity * 2 + 1];
        this->capacity = this->capacity * 2 + 1;
        for(size_t i = 0; i < numberOfElements; i++)
        {
            tempElem[i] = this->elements[i];
        }
        this->erase();
        this->elements = tempElem;
    }
    
    void erase()
    {
        delete [] this->elements;
    }
    
    void copy(const Vector& other)
    {
        this->elements = new int[other.capacity];
        this->capacity = other.capacity;
        this->numberOfElements = other.numberOfElements;
        for(size_t i = 0; i < this->numberOfElements; i++)
        {
            this->elements[i] = other.elements[i];
        }
    }
public:
    Vector();
    Vector(const Vector& other);
    Vector& operator=(const Vector& other);
    ~Vector();
    void push(size_t element, size_t index);
    void push_back(size_t element);
    void push_front(size_t element);
    void pop(size_t index);
    void pop_back();
    void pop_front();
    int get(size_t index) const;
    bool isEmpty() const;
    size_t get_size() const;
    void print() const;
}
    
Vector::Vector()
{
    this->numberOfElements = 0;
    this->capacity = 8;
    this->elements = new int[this->numberOfElements];
}

Vector::Vector(const Vector& other)
{
    this->copy(other);
}

Vector& Vector::operator=(const Vector& other)
{
    if(this != &other)
    {
        this->erase();
        this->copy(other);
    }
    return *this;
}

Vector::~Vector()
{
    this->erase();
}

void Vector::push(size_t element, size_t index)
{
    this->numberOfElements++;
    if(this->numberOfElements >= this->capacity)
    {
        this->resize();
    }
    for(size_t i = numberOfElements - 1; i > index; i--)
    {
        this->elements[i] = this->elements[i - 1];
    }
    this->elements[index] = element;
}

void Vector::push_back(size_t element)
{
    this->push(element, this->numberOfElements);
}

void Vector::push_front(size_t element)
{
    this->push(element, 0);
}

void Vector::pop(size_t index)
 {
     for(size_t i = index; i< this->numberOfElems; i++)
     {
         this->elements[i] = this->elements[i - 1];
     }
     this->numberOfElems--;
 }
 
void Vector::pop_back()
{
    this->pop(this->numberOfElements--);
}

void Vector::pop_front()
{
    this->pop(0);
}

int Vector::get(size_t index) const
{
    return this->elements[index];
}

bool Vector::isEmpty() const
{
    return this->numberOfElements == 0;
}

size_t Vector::get_size() const
{
    return this->numberOfElements;
}

void Vector::print() const
{
    for(size_t i = 0; i < this->numberOfElements; i++)
    {
        cout << this->elements[i] << endl;
    }
}

int main()
{
    return 0;
}
